# SPDX-FileCopyrightText: Copyright DB Netz AG
# SPDX-License-Identifier: Apache-2.0

from pathlib import Path
import re

FILE_DIR = Path(__file__).resolve().parent
REPO_ROOT_DIR = FILE_DIR.parent


def create_mapping_line(content: str):
    return f"{{ {content} }},\n"


def create_include_mapping_line(first_expression: str,
                                second_expression: str,
                                first_exprion_visibility="private",
                                second_expression_visibility="public") -> str:
    return create_mapping_line(
        f'include: ["{first_expression}", {first_exprion_visibility}, "{second_expression}", {second_expression_visibility} ]'
    )


def create_mappings_for_header_facades(
        header_facades: list[tuple[Path, str]]) -> list[str]:
    header_regex = re.compile(r'#\s*include\s*[<"]([^<>""]+)[>"]')

    mapping_lines = []
    for header, include in header_facades:
        with open(header, 'r') as f:
            content = f.read()
        for match in header_regex.finditer(content):
            mapping_lines.append(
                create_include_mapping_line(f'\\"{match.group(1)}\\"',
                                            include))
            mapping_lines.append(
                create_include_mapping_line(f'<{match.group(1)}>', include))
    return mapping_lines


def create_iwyu_ros_message_mapping(package_include_path: Path) -> list[str]:
    mapping_lines = []
    for pkg_path in package_include_path.iterdir():
        package_name = pkg_path.stem

        msg_dir = pkg_path / package_name / "msg"
        if not msg_dir.is_dir():
            continue
        for file_path in msg_dir.iterdir():
            if file_path.suffix != ".hpp":
                continue
            correct_header_file_name = file_path.name
            details_header_file_name = f"{file_path.stem}__struct.hpp"

            if (msg_dir / "detail" / details_header_file_name).exists():
                mapping_line = create_include_mapping_line(
                    f"<{package_name}/msg/detail/{details_header_file_name}>",
                    f"<{package_name}/msg/{correct_header_file_name}>")
                mapping_lines.append(mapping_line)

    return mapping_lines


def write_iywu_file(output_dir: Path, file_name: str,
                    mapping_lines: list[str]):
    iwyu_file = output_dir / file_name
    with open(iwyu_file, "w") as f:
        f.write("# Do no modify. Autogenerated by generate_mappings.py\n")
        f.write("[\n")
        f.writelines(mapping_lines)
        f.write("]\n")
    print(f"IWYU mapping file created at: {iwyu_file}")


if __name__ == "__main__":
    output_dir = REPO_ROOT_DIR / "build/iwyu_mappings"
    output_dir.mkdir(exist_ok=True, parents=True)

    # mapping = create_mappings_for_header_facades([
    #     (Path(f"/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp"), "<rclcpp/rclcpp.hpp>")
    # ])
    # write_iywu_file("ros_mappings.imp", mapping)
    write_iywu_file(output_dir, "ros_manual_mappings.imp", [
        create_include_mapping_line("@<rclcpp/.*>", "<rclcpp/rclcpp.hpp>"),
    ])

    mapping = create_iwyu_ros_message_mapping(Path(f"/opt/ros/humble/include"))
    write_iywu_file(output_dir, "ros_message_mappings.imp", mapping)

    mapping = create_iwyu_ros_message_mapping(
        REPO_ROOT_DIR / "install/dsd_ros_messages/include")
    write_iywu_file(output_dir, "dsd_message_mappings.imp", mapping)

    boost_include_dir = Path("/usr/include/boost")
    mapping = create_mappings_for_header_facades([
        (boost_include_dir / "geometry.hpp", "<boost/geometry.hpp>"),
        (boost_include_dir / "geometry/geometry.hpp", "<boost/geometry.hpp>"),
        (boost_include_dir / "geometry/geometries/geometries.hpp",
         "<boost/geometry/geometries/geometries.hpp>"),
        (boost_include_dir / "geometry/strategies/strategies.hpp",
         "<boost/geometry.hpp>"),
        (boost_include_dir / "filesystem.hpp", "<boost/filesystem.hpp>"),
        (boost_include_dir / "shared_ptr.hpp", "<boost/shared_ptr.hpp>"),
    ])
    write_iywu_file(output_dir, "boost_mappings.imp", mapping)

    write_iywu_file(
        output_dir,
        "boost_manual_mappings.imp",
        [
            # Note: It seems that these faces header include the whole module. If this assumption is incorrect, adjustments need to be made.
            create_include_mapping_line("@<boost/bind/.*>",
                                        "<boost/bind.hpp>"),
            create_include_mapping_line("@<boost/format/.*>",
                                        "<boost/format.hpp>"),
            create_include_mapping_line("@<boost/function/.*>",
                                        "<boost/function.hpp>"),
            create_include_mapping_line("@<boost/predef/.*>",
                                        "<boost/predef.h>"),
            create_include_mapping_line("@<boost/qvm/.*>",
                                        "<boost/qvm/all.hpp>"),
            create_include_mapping_line("@<boost/variant/.*>",
                                        "<boost/variant.hpp>"),

            # TODO(leon): Details can be mapped in an automatic fashion. But this seems to work for now.
            create_include_mapping_line(
                "@<boost/geometry/algorithms/detail/.*>",
                "<boost/geometry.hpp>"),
            create_include_mapping_line(
                "<boost/geometry/index/detail/predicates.hpp>",
                "<boost/geometry/index/predicates.hpp>"),
        ])

    mapping_refs = [
        create_mapping_line(f'ref: "./{file.name}"')
        for file in output_dir.iterdir()
        if file.suffix == ".imp" and file.name != "main.imp"
    ]
    write_iywu_file(output_dir, "main.imp", mapping_refs)
